(require :stumpwm)

;; Load Slynk
;(require :slynk)
;(require :uiop)
;(require :slynk)
;(defun run (command)
;  (sb-thread:make-thread
;   (lambda ()
;     (let ((exit-code (uiop:wait-process (uiop:launch-program command))))
;       (zerop exit-code)))
;   :name
;   (uiop:strcat "Waiting for '" command "'")))

;; (defun notify-send (msg &rest args)
;;   (run (format nil "notify-send ~{~a~^ ~}" (cons msg args))))

;; (defvar *slynk-default-port* 4005)
;; (defcommand slynk-start (port) ((:number "Port number: "))
;;   Start a slynk server manually from the parent sbcl process.
;;   Can then connect to it using `sly-connect' in emacs.
;;  (setq *slynkthread* (sb-thread:make-thread
;;                       (lambda ()
;;                          (slynk:create-server :port (or port *slynk-default-port*) :dont-close t)
;;                           )))
;;   nil)
;(defcommand slynk-stop () ((:string "Port number: "))
;  ())

(stumpwm:stumpwm)
